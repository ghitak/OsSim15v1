get.info.qr.by.id= select Id_QR, mod_QR, blockOnStep, question, includeAnswers, difficulty, answerType from question_reponse where question_reponse.id_qr=?
list.qr.by.exercice= select id_qr from qr_exo where qr_exo.id_exo=?
list.answers.by.qr= select answer, isCorrectanswer from QR_answers where QR_answers.id_QR=?
get.info.qr.memoire.by.qr= select  memorySize, soSize, pageSize, policy, management from QR_memoire Where QR_memoire.id_QR=?
get.param.qr.processus.by.qr= select multiprogramming, preemptive, quantum, var, verrou, management from qr_param_processus Where qr_param_processus.id_QR=?
list.processus.ready.by.qr= select Pid, p_name, prio, submission, Periodic, Bursts, Color, Variables, Resources, Queue_id from QR_Processus where QR_Processus.id_QR=? and Queue_id='R'
list.processus.arriving.by.qr= select Pid, p_name, prio, submission, Periodic, Bursts, Color, Variables, Resources, Queue_id from QR_Processus where QR_Processus.id_QR=? and Queue_id='A'
list.processus.memoire.by.qr= select Pid, Pname, size, memSize, duration, color, quantumOrders, quantum from QR_Process_Mem where QR_Process_Mem.id_QR=? 
list.bid.by.pid= select bid, size, load from Proc_Bid where Proc_Bid.pid=?
get.etudiant.by.id=SELECT login, nomprenom_etudiant FROM Etudiant WHERE id_Etudiant = ?
init.mdp.etudiant= UPDATE ETUDIANT SET password= ? where id_Etudiant = ?
list.exo.publie= select id_exercice, Titre_exo, exo_type from Exercice where Exercice.isActif=1 and Exercice.Exo_type='e'
list.tests.publie= select id_exercice, Titre_exo, exo_type from Exercice where Exercice.isActif=1 and Exercice.Exo_type='t'    
authentification.professeur= select id_professeur from Professeur where login=? and password=?
authentification.etudiant= select id_Etudiant from Etudiant where login=? and password=?
list.test.realise.by.etudiant= select e.Titre_exo, t.result, t.date_testpassing from test_realise as t, exercice as e where t.id_Exo = e.id_Exercice and e.exo_type = "t" and t.id_Etudiant = ?
list.test.realise.etudiant.by.test= select e.Titre_exo, t.result, t.date_testpassing, et.nomprenom_etudiant from etudiant as et, test_realise as t, Exercice as e where t.id_Exo = e.id_Exercice  and t.id_Etudiant = et.id_Etudiant and e.id_Exercice = ?
list.question = select id_qr, Mod_QR, title_QR, blockOnStep, Question, includeAnswers, Difficulty, answerType from question_reponse
list.test.realise.etudiant.by.test= select e.Titre_exo, t.result, t.date_testpassing, et.nomprenom_etudiant from etudiant as et, test_realise as t, Exercice as e where t.id_Exo = e.id_Exercice  and t.id_Etudiant = et.id_Etudiant and e.id_Exercice = ?
insert.info.qr=insert into `question_reponse`(`Mod_QR`, `blockOnStep`, `Question`, `includeAnswers`,`Difficulty`,`answerType`) values (?, ?, ?, ?, ?, ?)
insert.param.sim.process=insert into `qr_param_processus`(`id_qr`,`multiprogramming`, `Preemptive`, `Quantum`,`Var`,`Verrou`,`management`) values (?, ?, ?, ?, ?, ?, ?)
insert.param.sim.memoire=insert into `qr_memory`(`id_qr`,`management`, `pageSize`, `memorySize`, `soSize`, `policy`) values (?, ?, ?, ?, ?, ?)
insert.answer.by.qr=insert into `qr_answers`(`id_qr`,`answer`, `isCorrectanswer`) values (?, ?, ?)
insert.process.sim.process=insert into `qr_processus`(`id_qr`,`pid`, `p_name`, `Prio`,`Submission`,`Periodic`,`Bursts`,`Color`,`Variables`,`Resources`,`Queue_id`) values (? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? )
insert.process.sim.memoire=insert into `qr_processus_mem`(`id_qr`,`pid`, `p_name`, `Prio`,`size`,`duration`,`Color`,`quantumOrders`,`quantum`) values (? , ? , ? , ? , ? , ? , ? , ? , ? )
insert.bid=insert into `qr_processus`(`id_qr`,`pid`, `bid`, `size`,`load`) values (? , ? , ? , ? , ?  )
insert.exercice.info=insert into `exercice`(`Titre_exo`,`exo_type`,`isActif`) values (?,?,?)
insert.qr.exercice=insert into `qr_exo`(`id_exo`,`id_qr`) values (?,?)